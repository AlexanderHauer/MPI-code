import time
import random
import sys

sys.setrecursionlimit(10**9)


def bubble_sort(array):
    n = len(array)
    for i in range(n):
        for j in range(0, n-i-1):
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
    return array


def cocktail_shaker_sort(array):
    n = len(array)
    swapped = True
    start = 0
    end = n - 1

    while swapped:
        swapped = False

        for i in range(start, end):
            if array[i] > array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                swapped = True

        if not swapped:
            break

        swapped = False
        end -= 1

        for i in range(end - 1, start - 1, -1):
            if array[i] > array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                swapped = True

        start += 1

    return array


def insertion_sort(array):
    n = len(array)

    for i in range(1, n):
        key = array[i]
        j = i - 1

        while j >= 0 and key < array[j]:
            array[j + 1] = array[j]
            j -= 1

        array[j + 1] = key

    return array


def selection_sort(array):
    n = len(array)

    for i in range(n):
        min_index = i

        for j in range(i + 1, n):
            if array[j] < array[min_index]:
                min_index = j

        if min_index != i:
            array[i], array[min_index] = array[min_index], array[i]

    return array


def counting_sort(array):
    max_value = max(array)
    min_value = min(array)
    range_of_elements = max_value - min_value + 1

    count = [0] * range_of_elements
    output = [0] * len(array)

    for num in array:
        count[num - min_value] += 1

    for i in range(1, len(count)):
        count[i] += count[i - 1]

    for i in range(len(array) - 1, -1, -1):
        output[count[array[i] - min_value] - 1] = array[i]
        count[array[i] - min_value] -= 1

    for i in range(len(array)):
        array[i] = output[i]

    return array


def counting_sort_for_radix(array, exp):
    n = len(array)
    output = [0] * n
    count = [0] * 10

    for i in range(n):
        index = array[i] // exp
        count[index % 10] += 1

    for i in range(1, 10):
        count[i] += count[i - 1]

    i = n - 1
    while i >= 0:
        index = array[i] // exp
        output[count[index % 10] - 1] = array[i]
        count[index % 10] -= 1
        i -= 1

    for i in range(n):
        array[i] = output[i]

def radix_sort(array):
    max_value = max(array)
    exp = 1

    while max_value // exp > 0:
        counting_sort_for_radix(array, exp)
        exp *= 10

    return array


def merge_sort(array):

    def merge(left, right):
        result = []
        i = j = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                result.append(left[i])
                i += 1
            else:
                result.append(right[j])
                j += 1

        result.extend(left[i:])
        result.extend(right[j:])
        return result

    if len(array) <= 1:
        return array

    mid = len(array) // 2
    left = merge_sort(array[:mid])
    right = merge_sort(array[mid:])
    return merge(left, right)


def quick_sort(array):

    def partition(low, high):
        pivot = array[high]
        i = low - 1

        for j in range(low, high):
            if array[j] <= pivot:
                i += 1
                array[i], array[j] = array[j], array[i]

        array[i + 1], array[high] = array[high], array[i + 1]
        return i + 1

    def quick_sort_recursive(low, high):
        if low < high:
            pi = partition(low, high)
            quick_sort_recursive(low, pi - 1)
            quick_sort_recursive(pi + 1, high)

    quick_sort_recursive(0, len(array) - 1)
    return array


def heap_sort(array):

    def heapify(arr, n, i):
        largest = i
        left = 2 * i + 1
        right = 2 * i + 2

        if left < n and arr[left] > arr[largest]:
            largest = left

        if right < n and arr[right] > arr[largest]:
            largest = right

        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            heapify(arr, n, largest)

    n = len(array)

    for i in range(n // 2 - 1, -1, -1):
        heapify(array, n, i)

    for i in range(n - 1, 0, -1):
        array[i], array[0] = array[0], array[i]
        heapify(array, i, 0)

    return array



def strand_sort(orig_list):
    sol_list = []
    k = 0

    if not orig_list:
        return sol_list

    else:
        sub_list = [orig_list.pop(0)]

        index = 0
        j = 0
        while j < len(orig_list):
            if orig_list[j] > sub_list[index]:
                sub_list.append(orig_list.pop(j))
                index += 1
            else:
                j += 1

        if k == 0:
            sol_list.extend(sub_list)
            k += 1
        else:
            sub_end = len(sub_list) - 1
            sol_start = 0
            while sub_list:
                if sub_list[sub_end] > sol_list[sol_start]:
                    sol_start += 1
                else:
                    sol_list.insert(sol_start, sub_list.pop(sub_end))
                    sub_end -= 1
                    sol_start = 0

        return sol_list + strand_sort(orig_list)

# =======================================================================================================================


def random_list(n):
    l = []
    for i in range(n):
        l.append(i)
    random.shuffle(l)
    return l


def almost_ordered(n):
    l = list(range(n))
    for _ in range(n // 200):
        a = random.randint(0, n - 1)
        b = random.randint(0, n - 1)
        l[a], l[b] = l[b], l[a]
    return l


def high_density(n):
    m = max(n // 200, 1)
    l = []
    for i in range(n):
        if i % m == 0:
            l.append(i % m)
        else:
            l.append(0)
    return l



def sparse_data(n):
    l = [0] * n
    for _ in range(n // 200):
        a = random.randint(0, n - 1)
        b = random.randint(1, n)
        l[a] = b
    return l


def reverse(n):
    l = []
    for i in range(n, 0, -1):
        l.append(i)
    return l


def presorted_chunks(n):
    l = []
    chunk_size = n // 10
    for j in range(10):
        chunk = [j * chunk_size + i for i in range(chunk_size)]
        l.extend(chunk)
    return l


# =======================================================================================================================
#
# Define sorting algorithms and their names

sorting_algorithms = {
    "Bubble Sort": bubble_sort,
    "Cocktail Shaker Sort": cocktail_shaker_sort,
    "Insertion Sort": insertion_sort,
    "Selection Sort": selection_sort,
    "Counting Sort": counting_sort,
    "Radix Sort": radix_sort,
    "Merge Sort": merge_sort,
    "Quick Sort": quick_sort,
    "Heap Sort": heap_sort,
    "Strand Sort": strand_sort
}

number = int(input("From n1="))
number2 = int(input("to n2="))


while number <= number2:
    ex_time = []
    my_list = random_list(number)
    list_copy = list(my_list)
    print("\n================================================\n")
    print(f"For n = {number}, the following results are obtained:")
    if number == 10000:
        print("10k")
    if number == 100000:
        print("100k")
    if number == 1000000:
        print("1 mil")
    if number == 10000000:
        print("10 mil")
    if number == 100000000:
        print("100 mil")
    print("\n================================================\n")

    for algo_name, algo_func in sorting_algorithms.items():
        my_list = list(list_copy)
        start_time = time.time()
        algo_func(my_list)
        end_time = time.time()
        execution_time = end_time - start_time
        ex_time.append(execution_time)
        print(f"{algo_name}: Execution time: {execution_time} seconds")


    number *= 10
    print(ex_time)

print("Done")
import winsound
duration = 3000  # milliseconds
freq = 666  # Hz
winsound.Beep(freq, duration)

# to do the many lists test, replace the code from line 340->369 with the following one:
#
# my_list = [6, 2, 9, 4, 8, 10, 5, 1, 3, 7]
#
# while number <= number2:
#     ex_time = []
#     print("\n================================================\n")
#     print(f"For n = {len(my_list)}, the following results are obtained:")
#     if len(my_list) == 10000:
#         print("10k")
#     if len(my_list) == 100000:
#         print("100k")
#     if len(my_list) == 1000000:
#         print("1 mil")
#     if len(my_list) == 10000000:
#         print("10 mil")
#     if len(my_list) == 100000000:
#         print("100 mil")
#     print("\n================================================\n")
#
#     for algo_name, algo_func in sorting_algorithms.items():
#         total_time = 0
#         for _ in range(number2):
#             start_time = time.time()
#             sorted_list = algo_func(my_list.copy())
#             end_time = time.time()
#             execution_time = end_time - start_time
#             total_time += execution_time
#         average_time = total_time / number2
#         ex_time.append(average_time)
#         print(f"{algo_name}: Average execution time: {average_time} seconds")
#
#     print(ex_time)
#     my_list *= 10
